#!/bin/env python
import numpy as np
import pandas as pd
import pickle
# scikit-multiflow
from skmultiflow.meta import AdaptiveRandomForestClassifier

# scikit-multiflow drift detection
from skmultiflow.drift_detection import PageHinkley
from skmultiflow.drift_detection import ADWIN
from skmultiflow.drift_detection import EDDM
from skmultiflow.drift_detection import DDM

from skmultiflow.drift_detection import KSWIN
from skmultiflow.drift_detection import HDDM_A
from skmultiflow.drift_detection import HDDM_W

# scikit extra tools
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score,recall_score,accuracy_score,f1_score

# Drift detection
from frouros.detectors.concept_drift import DDM, DDMConfig

# Load the list of DataFrames from the file

with open(r'AdaptativeRandomForest\\data\\experiment_1\\splitted_data_partialandOnline\\X_test.pkl', 'rb') as f:
    X_test_list = pickle.load(f)

with open(r'AdaptativeRandomForest\\data\\experiment_1\\splitted_data_partialandOnline\\y_test.pkl', 'rb') as f:
    y_test_list = pickle.load(f)

with open(r'AdaptativeRandomForest\\outputs\\online_training\\DDM\\estimators100\\experiment_1\\models.pkl', 'rb') as f:
    models = pickle.load(f)


def metrics(models, X_test_list, y_test_list,drift_method = None):
    if drift_method != None :
        drift = drift_method
    for i in range(0,1):
        prediction = models[i].predict(X_test_list[i][:20])
        drift.add_element(prediction[0])
        if i > 0 :
            if drift.detected_change():
                drift_detected += 1
    return drift

config = DDMConfig(warning_level=2.0,
                   drift_level=3.0,
                   min_num_instances=30,)
detector = DDM(config=config)
def drift_frouros(models, X_test_list, y_test_list,drift_method = None):
    for i in range(0,1):
        prediction = models[i].predict(X_test_list[i][:20])
        error = 1 - int(prediction = y_test_list[i])
        detector.update(value=error)
        status = detector.status
        if status["drift"]:
            print(f"Drift detected at index {i}")
            break


drift_detected = metrics(models, X_test_list,y_test_list , DDM(min_num_instances =10) )


##print(drift_detected)


#print(X_test_list[0].shape)
