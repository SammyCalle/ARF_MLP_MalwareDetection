#!/bin/env python
import numpy as np
import pandas as pd
import pickle
# scikit-multiflow
from skmultiflow.meta import AdaptiveRandomForestClassifier

# scikit-multiflow drift detection
from skmultiflow.drift_detection import PageHinkley
from skmultiflow.drift_detection import ADWIN
from skmultiflow.drift_detection import EDDM
from skmultiflow.drift_detection import DDM

from skmultiflow.drift_detection import KSWIN
from skmultiflow.drift_detection import HDDM_A
from skmultiflow.drift_detection import HDDM_W

# scikit extra tools
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score,recall_score,accuracy_score,f1_score

# Load the list of DataFrames from the file


with open(r'AdaptativeRandomForest\\data\\experiment_1\\splitted_data_partialandOnline\\X_train.pkl', 'rb') as f:
    X_train_list = pickle.load(f)

with open(r'AdaptativeRandomForest\\data\\experiment_1\\splitted_data_partialandOnline\\y_train.pkl', 'rb') as f:
    y_train_list = pickle.load(f)
 
#This Initial model creator will create a model with the inital given by the first data frame
# In the  list of dataframes given as a parameter , then will incrementally create a new 
#data for training from the next dataframe and the one or ones before the current execution.
# Just in case the back counter is set in 2 because after the first month will go back one 
# in the list and the as the i value increases will go back 2,3.. and so on.
def modelCreator (X_train_list,y_train_list,partial_fit, n_estimators ,drift_method = None, warning_method = None):
    model_list = []
    if drift_method != None :
        drift = drift_method
    for i in range(len(X_train_list)):
        X_train_le = X_train_list[i]
        y_train_le = y_train_list[i]
        arf  = AdaptiveRandomForestClassifier(n_estimators = n_estimators, drift_detection_method = drift_method,
                            warning_detection_method = warning_method)
       
        if partial_fit:
            model = arf.partial_fit(X_train_le,y_train_le)
        else :
            model = arf.fit(X_train_le,y_train_le)
  
        model_list.append(model)
   
    return model_list

model_list = modelCreator(X_train_list,y_train_list,True,100,DDM(),DDM())

with open(r'models.pkl', 'wb') as f :
    pickle.dump(model_list, f)

