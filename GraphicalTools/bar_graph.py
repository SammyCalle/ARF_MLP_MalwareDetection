from matplotlib import pyplot as plt
import numpy as np
import ast

def draw_multiBarGraph(metric_labels,metrics,y_label,title,n_cols):
    x = np.arange(len(metric_labels))
    width = 0.20
    multiplier = 0
    fig, ax = plt.subplots(layout='constrained')
    for attribute, measurement in metrics.items():
        offset = width * multiplier
        rects = ax.bar(x + offset, measurement, width, label=attribute)
        #ax.bar_label(rects, padding=3)
        multiplier += 1

    ax.set_ylabel(y_label)
    ax.set_title(title)
    ax.set_xticks(x + width, metric_labels)
    #ax.legend(loc='lower left', ncols=n_cols)
    ax.set_ylim(0, 1)
    plt.show()

def draw_barGraph(x_axis, y_axis, title, x_label,y_label):
    plt.bar(x_axis, y_axis)
    plt.title(title)
    plt.xlabel(x_label)
    plt.bar_label(y_axis)
    plt.ylabel(y_label)
    plt.ylim(0,1)
    plt.show()

#From Here I will set the experiment envirioment
metrics_labels = ("Accuracy","Precision","Recall","F1-Score")

with open(r'AdaptativeRandomForest\\outputs\\online_training\\DDM\\estimators100\\experiment_1\\avg_es100_ex1_DDM.txt','r') as file:
    line = file.readline()

sys_calls = ast.literal_eval(line)

with open(r'AdaptativeRandomForest\\outputs\\online_training\\DDM\\estimators100\\experiment_2\\avg_es100_ex2_DDM.txt','r') as file:
    line = file.readline()

permissions = ast.literal_eval(line)

with open(r'AdaptativeRandomForest\\outputs\\online_training\\DDM\\estimators100\\experiment_3\\avg_es100_ex3_DDM.txt','r') as file:
    line = file.readline()

hybrid = ast.literal_eval(line)

values3 = {"Only SysCalls": sys_calls, "Only Permisions": permissions, "Hybrid":hybrid}
#All Experiments 
#draw_multiBarGraph(metrics_labels,values,"Metrics", "ARF Metrics with DDM, EDDM, ADWIN and PageHinkley drift detection",4)
draw_multiBarGraph(metrics_labels,values3,"Metrics", "Retrain Metrics for SystemCalls, Permissions and Both",3)



